/*
	Client Server Automation Server Side Dispatcher for Node.js
	Author: David Ge
	Date: 2015-02-10
	Description: it is a server side dispatcher for client server automation. csa.js connects to this web server via socket.io
*/

var fs = require("fs");
var app = require('express')();
var url = require('url');
var http = require('http').Server(app);
var io = require('socket.io')(http);
var DEBUG_SYMBOL = "F3E767376E6546a8A15D97951C849CE5";

app.get('/', function (req, res) {
	res.sendFile(__dirname + '/index.html');
});
app.get('*.html', function (req, res) {
	res.sendFile(__dirname + url.parse(req.url).pathname);
});
app.get('*.js', function (req, res) {
	res.sendFile(__dirname + url.parse(req.url).pathname);
});
app.get('*.css', function (req, res) {
	res.sendFile(__dirname + url.parse(req.url).pathname);
});

io.on('connection', function (socket) {
	function startsWith(container, starts) {
		if (container && starts) {
			if (container.length >= starts.length) {
				var c = container.substr(0, starts.length);
				return (c == starts);
			}
		}
		return false;
	}
	socket.on('csa', function (msg) {
		var DEBUG = false;
		var resp = '';
		var serverResponse = {};
		if (startsWith(msg, DEBUG_SYMBOL)) {
			DEBUG = true;
			msg = msg.substr(DEBUG_SYMBOL.length);
		}
		if (DEBUG) {
			resp += "client request:";
			resp += msg;
			resp += "<br />";
		}
		console.log('on csa:' + msg);
		var clientData = JSON.parse(msg);
		//clientData.clientvalues : uploaded values to be used by server side JavaScript files and code
		//clientData.ServerFiles : server side JavaScript files to be executed, it includes server API files and a file generated by CSA preprocessor
		//clientData.ServerTypes : treat each item as a JavaScript file name, each file implements classes referenced in the server API files
		//clientData.code : JavaScript code to be executed. current CSA does not use it
		if (DEBUG) {
			resp += "client values:";
			if (clientData.clientvalues) {
				resp += JSON.stringify(clientData.clientvalues);
			}
			resp += "<br>";
			if (clientData.ServerTypes) {
				resp += "server types:";
				console.log('server types:');
				for (var i = 0; i < clientData.ServerTypes.length; i++) {
					console.log(__dirname + "/serverjs/" + clientData.ServerTypes[i] + '.js');
					resp += (__dirname + "/serverjs/" + clientData.ServerTypes[i] + '.js');
				}
				resp += "<br>";
			}
			if (clientData.ServerFiles) {
				resp += "server fils:";
				console.log('server files:');
				for (var i = 0; i < clientData.ServerFiles.length; i++) {
					console.log(__dirname + "/serverjs/" + clientData.ServerFiles[i]);
					resp += (__dirname + "/serverjs/" + clientData.ServerFiles[i]);
				}
				resp += "<br>";
			}
		}
		//setup clientvalues to be accessed from within eval
		var clientvalues = {};
		if (clientData.clientvalues) {
			for (var nm in clientData.clientvalues) {
				var t = typeof (clientData.clientvalues[nm]);
				if (t != 'undefined' && t != 'function') {
					clientvalues[nm] = clientData.clientvalues[nm];
				}
			}
		}
		//server code to be executed:
		var sevrercode = '';
		if (clientData.ServerTypes) {
			for (var i = 0; i < clientData.ServerTypes.length; i++) {
				var ftxt = fs.readFileSync(__dirname + "/serverjs/" + clientData.ServerTypes[i] + '.js', 'utf8');
				sevrercode += ftxt;
			}
		}
		if (clientData.ServerFiles) {
			for (var i = 0; i < clientData.ServerFiles.length; i++) {
				var ftxt = fs.readFileSync(__dirname + "/serverjs/" + clientData.ServerFiles[i], 'utf8');
				sevrercode += ftxt;
			}
		}
		if (clientData.code && clientData.code.length > 0) {
			sevrercode += clientData.code;
		}
		console.log('server code length:' + sevrercode.length);
		if (sevrercode.length > 0) {
			var jsServer = function () {
				var _data = {};
				return {
					values: _data,
					AddDownloadValue: function (name, value) {
						_data[name] = value;
					}
				}
			}();
			//execute the server code
			//sevrercode will use jsServer to add download values
			eval(sevrercode);
			//add download values to response
			if (jsServer.values) {
				serverResponse.values = jsServer.values;
			}
		}
		//send server response to client
		console.log('response:' + JSON.stringify(serverResponse));
		if (resp.length > 0) {
			io.emit('csa', resp + DEBUG_SYMBOL + JSON.stringify(serverResponse));
		}
		else {
			io.emit('csa', JSON.stringify(serverResponse));
		}
	});
	socket.on('disconnect', function () {
		console.log('user disconnected');
	});
	console.log('a user connected');
});

http.listen(3000, function(){
  console.log('listening on port server:3000');
});